<policies>
    <inbound>
        <base />
        <set-variable name="Request" value="@(context.Request.Body.As<JArray>())" />
        <choose>
            <when condition="@(context.Variables.GetValueOrDefault<JArray>("Request").Count == 0)">
                <return-response>
                    <set-status code="400" />
                    <set-header name="Content-Type" exists-action="override">
                        <value>application/json</value>
                    </set-header>
                    <set-body>{"error":"No events passed"}</set-body>
                </return-response>
            </when>
            <otherwise>
                <set-variable name="Event" value="@(context.Variables.GetValueOrDefault<JArray>("Request")[0])" />
                <choose>
                    <when condition="@(context.Variables.GetValueOrDefault<JObject>("Event")["eventType"].ToString() == "Microsoft.EventGrid.SubscriptionValidationEvent")">
                        <return-response>
                            <set-status code="200" />
                            <set-header name="Content-Type" exists-action="override">
                                <value>application/json</value>
                            </set-header>
                            <set-body>@{
                                        var validationResponse = new JObject(new JProperty("validationResponse",context.Variables.GetValueOrDefault<JObject>("Event")["data"]["validationCode"].ToString()));
                                        return validationResponse.ToString();
                                    }</set-body>
                        </return-response>
                    </when>
                    <otherwise>
                        <set-header name="Content-Type" exists-action="override">
                            <value>application/json</value>
                        </set-header>
                        <set-header name="X-Event-Id" exists-action="override">
                            <value>@(context.Variables.GetValueOrDefault<JObject>("Event")["id"].ToString())</value>
                        </set-header>
                        <set-header name="X-Event-Subject" exists-action="override">
                            <value>@(context.Variables.GetValueOrDefault<JObject>("Event")["subject"].ToString())</value>
                        </set-header>
                        <set-header name="X-Event-Type" exists-action="override">
                            <value>@(context.Variables.GetValueOrDefault<JObject>("Event")["eventType"].ToString())</value>
                        </set-header>
                        <set-header name="X-Event-Time" exists-action="override">
                            <value>@(context.Variables.GetValueOrDefault<JObject>("Event")["eventTime"].ToString())</value>
                        </set-header>
                        <set-header name="X-Event-Data-Version" exists-action="override">
                            <value>@(context.Variables.GetValueOrDefault<JObject>("Event")["dataVersion"].ToString())</value>
                        </set-header>
                        <set-header name="X-Event-Metadata-Version" exists-action="override">
                            <value>@(context.Variables.GetValueOrDefault<JObject>("Event")["metadataVersion"].ToString())</value>
                        </set-header>
                        <set-header name="X-Event-Topic" exists-action="override">
                            <value>@(context.Variables.GetValueOrDefault<JObject>("Event")["topic"].ToString())</value>
                        </set-header>
                        <set-body>@(context.Variables.GetValueOrDefault<JArray>("Request").ToString())</set-body>
                        <set-backend-service base-url="__applicationUrl__" />
                    </otherwise>
                </choose>
            </otherwise>
        </choose>
    </inbound>
    <backend>
        <base />
    </backend>
    <outbound>
        <base />
    </outbound>
    <on-error>
        <base />
    </on-error>
</policies>
